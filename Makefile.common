# -*- Makefile -*-

# This is a common Makefile that can be used as the core buildsystem for
# projects providing a library and some executables using this library. Simple example:
#
#
#    PROJECT_NAME := gltk
#    ABI_VERSION  := 0
#    TAIL_VERSION := 1
#
#    LIB_SOURCES := Gltk_Fl_Window.cc gltk.c gltk_control.c gltk_plot.c gltk_test_cmdline.c
#    BIN_SOURCES := gltk_test.cc
#
#    CCXXFLAGS += -Wno-unused-parameter -Wno-unused-variable -Wno-unused-but-set-variable
#
#    LDLIBS := -lfltk -lfltk_gl -lGL -lGLU -lglut
#
#    DIST_BIN_EXCEPT     := *_test
#    DIST_INCLUDE_EXCEPT := *_test_*
#
#
#    include /usr/include/mrbuild/Makefile.common
#    -include *.d
#

# So we define some variables to set up our project, and the thing works. This
# is a plain Makefile, so things that work in plain Makefiles work here. You can
# define your own rules, dependencies and variables. Things like per-target
# variables should work.
#
# Variables that MUST be defined:
#
#     PROJECT_NAME  The name of the project. Ends up in the SONAME. Libraries
#                   may or may not be called lib..., but the "lib" will be
#                   prepended to the SONAME if it's missing
#
#     ABI_VERSION   An integer indicating the version of the ABI. Usually the
#                   same as the major version number of the project. Together
#                   with TAIL_VERSION, these define the default
#                     VERSION ?= $(ABI_VERSION).$(TAIL_VERSION)
#                   which can be used in the per-project Makefile
#
#     TAIL_VERSION  An arbitrary string. Together with TAIL_VERSION, these
#                   define the default
#                       VERSION ?= $(ABI_VERSION).$(TAIL_VERSION)
#                   which can be used in the per-project Makefile
#
#
# Variables that MAY be defined:
#
#     VERSION       A version string is always passed as a #define to the
#                   compiler, to all documentation generators (gengetopt and
#                   such). The project Makefile can set this to whatever they
#                   like. If omitted, it defaults to
#                       VERSION ?= $(ABI_VERSION).$(TAIL_VERSION)

#     LIB_SOURCES   Sources to build into a library. If undefined, all C and C++
#                   sources in src/ are taken
#
#     BIN_SOURCES   Sources to build into executables. By default each executable
#                   will be built from the library and each source in
#                   BIN_SOURCES. If undefined, all C and C++ sources in bin/ are
#                   taken
#
#     CFLAGS	    Flags for C, C++, the preprocessor and both respectively. By
#     CXXFLAGS	    default we pass -O3 and (for C++) -std=c++0x. If we specify
#     CCXXFLAGS	    any other optimization level or standard, the defaults will
#     CPPFLAGS      be omitted. To make commandline-based options work, touch
#                   these with +=
#
#     LDFLAGS       Similar to the above. The linker flags
#
#     LDLIBS        Similar to the above. The libraries we link with. By default this
#                   applies to all objects, libraries and executables we build
#
#     DIST_BIN      Executables and headers (respectively) that we distribute. May
#     DIST_INCLUDE  include wildcards.
#
#     DIST_BIN_EXCEPT   Distribution blacklists. May include wildcards.
#     DIST_INCLUDE_EXCEPT
#
#     DIST_DOC      Documentation we ship. May include wildcards.
#
#     DIST_MAN      Man-pages we ship. May include wildcards.
#
#     DIST_BIN_EXCEPT_FINDSPEC
#     DIST_INCLUDE_EXCEPT_FINDSPEC
#     DIST_DOC_EXCEPT_FINDSPEC
#     DIST_MAN_EXCEPT_FINDSPEC
#                   After we install a set of files to the DESTDIR, we may want
#                   to delete some subset of them. This is similar to the
#                   _EXCEPT blacklists above, but accomplished with the 'find'
#                   utility, so we have more flexibility. For instance, to
#                   install all the manpages except onces for tests, do this:
#
#                     DIST_MAN                 := doxygen-doc/man/man3
#                     DIST_MAN_EXCEPT_FINDSPEC := -type f -name '*_test.3'
#
#                   To install only the manpage for the frobnicator utility
#                   (delete all others) we do this:
#
#                     DIST_MAN                 := doxygen-doc/man/man3
#                     DIST_MAN_EXCEPT_FINDSPEC := -type f \! \( -name 'frobnicator.3' \)
#
#     EXTRA_CLEAN   Additional target to clean out during a 'make clean'



# Make sure I have the variables that must be defined
MUST_DEF_VARIABLES        := PROJECT_NAME ABI_VERSION TAIL_VERSION
$(foreach v,$(MUST_DEF_VARIABLES),$(if $($v),,$(error User MUST specify $v)))



# The default VERSION string that appears as a #define to each source file, and
# to any generated documentation (gengetopt and so on). The user can set this to
# whatever they like
VERSION ?= $(ABI_VERSION).$(TAIL_VERSION)

# Default compilers. By default, we use g++ as a linker
CC        ?= gcc
CXX       ?= g++
CC_LINKER ?= $(CXX)

# used to make gcc output header dependency information. All source
# files generated .d dependency definitions that are included at the
# bottom of this file
CCXXFLAGS += -MMD -MP

# always building with debug information. This is stripped into the
# -dbg/-debuginfo packages by debhelper/rpm later
CCXXFLAGS += -g

# I want the frame pointer. Makes walking the stack WAY easier
CCXXFLAGS += -fno-omit-frame-pointer

# We like to put headers into their own directory, so I tell the compiler about it
CCXXFLAGS += -Iinclude

# all warnings by default
CCXXFLAGS += -Wall -Wextra

LIB_SOURCES ?= $(wildcard $(addprefix src/*.,cpp cc C c cxx))
BIN_SOURCES ?= $(wildcard $(addprefix bin/*.,cpp cc C c cxx))
LIB_OBJECTS := $(addsuffix .o,$(basename $(LIB_SOURCES)))
BIN_OBJECTS := $(addsuffix .o,$(basename $(BIN_SOURCES)))

SOURCE_DIRS := $(sort ./ $(dir $(LIB_SOURCES) $(BIN_SOURCES)))

# if the PROJECT_NAME is libxxx then LIB_NAME is libxxx
# if the PROJECT_NAME is xxx    then LIB_NAME is libxxx
LIB_NAME           := $(or $(filter lib%,$(PROJECT_NAME)),lib$(PROJECT_NAME))
LIB_TARGET_SO_BARE := $(LIB_NAME).so
LIB_TARGET_SO	   := $(LIB_TARGET_SO_BARE).$(ABI_VERSION).$(TAIL_VERSION)

BIN_TARGETS := $(basename $(BIN_SOURCES))


# all objects built for inclusion in shared libraries get -fPIC. This is
# sub-optimal, since it adds the -fPIC overhead even if linking these
# statically, but this will have to do for now
$(LIB_OBJECTS): CCXXFLAGS += -fPIC

CCXXFLAGS += -DVERSION='"$(VERSION)"'




# These are here to process the options separately for each file being built.
# This allows per-target options to be set
#
# if no explicit optimization flags are given, optimize
define massageopts
$1 $(if $(filter -O%,$1),,-O3)
endef

# If no C++ standard requested, I default to c++0x
define massageopts_cxx
$(call massageopts,$1 $(if $(filter -std=%,$1),,-std=c++0x))
endef

define massageopts_c
$(call massageopts,$1)
endef



# define the compile rules. I need to redefine the rules here because my
# C..FLAGS variables are simple (immediately evaluated), but the user
# could have specified per-target flags that ALWAYS evaluate deferred-ly
cc_build_rule = $(strip $(CXX) $(call massageopts_cxx,$(CXXFLAGS) $(CCXXFLAGS) $(CPPFLAGS))) -c -o $@ $<
c_build_rule  = $(strip $(CC)  $(call massageopts_c,  $(CFLAGS)   $(CCXXFLAGS) $(CPPFLAGS))) -c -o $@ $<


%.o:%.C
	$(cc_build_rule)
%.o:%.cc
	$(cc_build_rule)
%.o:%.cpp
	$(cc_build_rule)
%.o:%.c
	$(c_build_rule)
%.o: %.S
	$(CC) $(ASFLAGS) $(CPPFLAGS) -c -o $@ $<

# We like to gengetopt things, and this rules does it
%.h %.c: %.ggo
	gengetopt -C -u -g $(VERSION) -i $< -F $* args -f $(notdir $*) -a $(notdir $*)

# this is how you build QT4 UIs. There's a tool to generate headers from
# UI definitions. There's also a tool to generate metadata from QT
# classes. This must be compiled and linked in. QT4_MOCS is a list of
# all these extra objects needed by QT. Simply add $(QT4_MOCS) to your
# objects list and magic happens. Similar with QT4_UI_HEADERS
ui_%.h: %.ui
	uic-qt4 $< > $@
moc_%.cpp: %.h
	moc-qt4 $< > $@

# by default I build shared libraries only. We known how to build static
# libraries too, but I don't do it unless asked
all: $(LIB_TARGET_SO) $(BIN_TARGETS)
.PHONY: all
.DEFAULT_GOAL := all



$(LIB_TARGET_SO): LDFLAGS += -shared -Wl,--default-symver -fPIC -Wl,-soname,$(notdir $(LIB_TARGET_SO_BARE)).$(ABI_VERSION)


# Here instead of specifying $^, I do just the %.o parts and then the
# others. This is required to make the linker happy to see the dependent
# objects first and the dependency objects last. Same as for BIN_TARGETS
$(LIB_TARGET_SO_BARE) $(LIB_TARGET_SO_BARE).$(ABI_VERSION): | $(LIB_TARGET_SO)
$(LIB_TARGET_SO): $(LIB_OBJECTS)
	$(CC_LINKER) $(LDFLAGS) $(filter %.o, $^) $(filter-out %.o, $^) $(LDLIBS) -o $@
	ln -fs $(notdir $@) $(LIB_TARGET_SO_BARE)
	ln -fs $(notdir $@) $(LIB_TARGET_SO_BARE).$(ABI_VERSION)

# I make sure to give the .o to the linker before the .so and everything else.
# The .o may depend on the other stuff.
$(BIN_TARGETS): %: %.o
	$(CC_LINKER) $(LDFLAGS) $(filter %.o, $^) $(filter-out %.o, $^) $(LDLIBS) -o $@

# The binaries link with the DSO, and get an rpath (removed at install time)
$(BIN_TARGETS): $(LIB_TARGET_SO)
$(BIN_TARGETS): LDFLAGS += -Wl,-rpath=$(abspath .)




clean:
	rm -rf $(foreach d,$(SOURCE_DIRS),$(addprefix $d,*.a *.o *.so *.so.* *.d moc_* ui_*.h)) $(BIN_TARGETS) $(foreach s,.c .h,$(addsuffix $s,$(basename $(shell find . -name *.ggo)))) $(EXTRA_CLEAN)
distclean: clean

.PHONY: distclean clean



########################### installation business

ifneq (,$(filter install,$(MAKECMDGOALS)))
  ifeq  ($(strip $(DESTDIR)),)
    $(error Tried to make install without having DESTDIR defined \
"make install" is ONLY for package building. \
What are you trying to do?)
  endif
endif


DIST_BIN     := $(filter-out $(wildcard $(DIST_BIN_EXCEPT)), \
                  $(or $(DIST_BIN),    $(BIN_TARGETS)))
DIST_INCLUDE := $(filter-out $(wildcard $(DIST_INCLUDE_EXCEPT)), \
                  $(or $(DIST_INCLUDE),$(wildcard                      *.h *.hh *.hpp *.H) \
                                       $(wildcard $(addprefix include/,*.h *.hh *.hpp *.H))))

# assuming redhat only for the time being
USRLIB := usr/lib64

# Generates the install rules. Arguments:
#   1. variable containing the being installed
#   2. target path they're being installed to
#   3. post-install commands
define install_rule
$(if $(strip $($1)),
	mkdir -p $2 &&									\
	cp -r $($1) $2 &&								\
	$(if $($(1)_EXCEPT_FINDSPEC),find $2 $($(1)_EXCEPT_FINDSPEC) -delete &&)	\
	$(or $3,true) )
endef

install: $(LIB_TARGET_SO) $(LIB_TARGET_SO_BARE) $(LIB_TARGET_SO_BARE).$(ABI_VERSION) $(BIN_TARGETS) \
         $(DIST_DOC) $(DIST_MAN)

# using 'cp -P' instead of 'install' because the latter follows links unconditionally
ifneq ($(strip $(LIB_SOURCES)),)
	mkdir -p $(DESTDIR)/$(USRLIB)
	cp -P $(LIB_TARGET_SO)  $(DESTDIR)/$(USRLIB)
	ln -fs $(notdir $(LIB_TARGET_SO)) $(DESTDIR)/$(USRLIB)/$(notdir $(LIB_TARGET_SO_BARE)).$(ABI_VERSION)
	ln -fs $(notdir $(LIB_TARGET_SO)) $(DESTDIR)/$(USRLIB)/$(notdir $(LIB_TARGET_SO_BARE))
endif

	$(call install_rule,DIST_BIN,     $(DESTDIR)/usr/bin,chmod 0755 $(DESTDIR)/usr/bin/* && chrpath -d $(DESTDIR)/usr/bin/*)
	$(call install_rule,DIST_INCLUDE, $(DESTDIR)/usr/include/$(PROJECT_NAME),)
	$(call install_rule,DIST_DOC,     $(DESTDIR)/usr/share/doc/$(PROJECT_NAME),)
	$(call install_rule,DIST_MAN,     $(DESTDIR)/usr/share/man,)
.PHONY: install



# I want to keep all the intermediate files always
.SECONDARY:

# the header dependencies
-include $(addsuffix *.d,$(SOURCE_DIRS))
